image: vrnetlab/ci-builder

variables:
  PNS: ci-${CI_PIPELINE_ID}

stages:
  - build

.build: &build-template
  stage: build
  tags:
    - vrnetlab
  script:
    # make sure we pulled LFS files
    - git lfs fetch -I ${CI_JOB_NAME}
    - git lfs checkout ${CI_JOB_NAME}
    - ls -l ${CI_JOB_NAME}
    # We allow the user to control which Docker registry is used through the
    # env var DOCKER_REGISTRY. If it is not set then we assume we should use
    # the GitLab built-in Docker registry so we check if it is enabled.
    # CI_REGISTRY is only set when the GitLab Docker registry is enabled
    - if [ -z "${DOCKER_REGISTRY}" ]; then if [ -n "${CI_REGISTRY}" ]; then export DOCKER_USER=gitlab-ci-token; export DOCKER_PASSWORD=${CI_JOB_TOKEN}; export DOCKER_REGISTRY=${CI_REGISTRY_IMAGE}; fi; fi
    - 'echo "DOCKER_REGISTRY: ${DOCKER_REGISTRY}"'
    # if DOCKER_REGISTRY set, either explicitly by user or implicitly by GitLab
    # (see above) we login to repo, build images and push them
    - if [ -n "${DOCKER_REGISTRY}" ]; then docker login -u ${DOCKER_USER} -p=${DOCKER_PASSWORD} ${DOCKER_REGISTRY}; fi
    - if [ -n "${DOCKER_REGISTRY}" ]; then
    -   make ${CI_JOB_NAME}
    -   make ${CI_JOB_NAME}-test
    -   echo "Pushing images"
    -   make ${CI_JOB_NAME}-push
    - fi
  interruptible: true
  after_script:
    # save logs for artifacts
    - make -C ${CI_JOB_NAME} docker-test-save-logs
    # clean up leftover (failed) test containers
    - make -C ${CI_JOB_NAME} docker-test-clean
  artifacts:
    when: always
    paths:
      - ${CI_JOB_NAME}/*.log

vr-xcon:
  <<: *build-template

vr-bgp:
  <<: *build-template

csr:
  <<: *build-template

nxos:
  <<: *build-template

nxos9kv:
  <<: *build-template

routeros:
  <<: *build-template

sros:
  <<: *build-template

veos:
  <<: *build-template

vmx:
  <<: *build-template

vsr1000:
  <<: *build-template

vqfx:
  <<: *build-template

vrp:
  <<: *build-template

xrv:
  <<: *build-template

xrv9k:
  <<: *build-template
